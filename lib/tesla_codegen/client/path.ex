defmodule TeslaCodegen.Client.Path do
  @moduledoc """
  Path generation operations
  """
  alias TeslaCodegen.Ast

  @path_elements_pattern ~r/{([^}]*)}/
  @doc """
  Generates an interpolated string using:

  ## Params

    * `client_module_name` to generate the module name
    * `path` to generate the request path with string interpolation
    * `url_parameters` generated by `TeslaCodegen.Client.QueryParam` to generate the URL parameters
  """
  def generate(client_module_name, path, []), do: generate_path_interpolation(client_module_name, path)

  def generate(client_module_name, path, url_parameters) do
    quote do: Tesla.build_url(unquote(generate_path_interpolation(client_module_name, path)), unquote(url_parameters))
  end

  defp generate_path_interpolation(client_module_name, path) do
    @path_elements_pattern
    |> Regex.split(path, include_captures: true)
    |> Enum.reject(&(&1 == ""))
    |> Enum.map(fn path ->
      case Regex.run(@path_elements_pattern, path) do
        [_, path] ->
          path
          |> Ast.to_var(client_module_name)
          |> then(&quote(do: :"Elixir.Kernel".to_string(unquote(&1)) :: binary))

        _ ->
          quote(do: unquote(path))
      end
    end)
    |> then(&{:<<>>, [], &1})
  end
end
